#!/usr/bin/python2

from os.path import basename, dirname
from cue import read_cue

from optparse import OptionParser, OptionGroup
from subprocess import Popen, PIPE
from utils import to_unicode
import mutagen
import sys
import os

progname = basename(sys.argv[0])

def printf(fmt, *args):
	sys.stdout.write(fmt % args)

def printerr(fmt, *args):
	msg = fmt % args
	if msg[-1] != "\n":
		msg += "\n"
	sys.stderr.write("** " + progname + ": " + msg)

def debug(fmt, *args):
	msg = fmt % args
	if msg[-1] != "\n":
		msg += "\n"
	sys.stderr.write("-- " + msg)

try:
	import config
except Exception as err:
	printerr("import config failed: %s", err)
	sys.exit(0)

def quote(s):
	return s if " " not in s else "\"%s\"" % s

def msf(ts):
	m = ts / (60 * 75)
	s = ts / 75 % 60
	f = ts % 75

	return "%d:%02d:%02d" % (m, s, f)

def print_cue(cue):
	for k, v in cue.attrs():
		printf("%s: %s\n", k.upper(), quote(v))

	for file in cue.files(audio_only = True):
		name = cue.path + file.name

		printf("FILE %s", quote(file.name))
		try:
			fp = mutagen.File(name)
		except IOError:
			printf(": unable to open\n")
		else:
			if fp is None:
				printf(": unknown type\n")
			else:
				printf(" (%d/%d, %d ch)\n",
					fp.info.bits_per_sample,
					fp.info.sample_rate,
					fp.info.channels)

		for track in file.tracks(audio_only = True):
			printf("\tTRACK %02d", track.number)
			title = track.get("title")
			if title != "":
				printf(" %s", quote(title))
			printf(": %s -", msf(track.begin))
			if track.end is not None:
				printf(" %s", msf(track.end))
			printf("\n")

			for k, v in track.attrs():
				if k not in ("pregap", "postgap", "title"):
					printf("\t\t%s: %s\n", k.upper(), quote(v))

def parse_args():
	parser = OptionParser(usage = u"Usage: %prog [options] cuefile")
	parser.add_option(
		"--ignore",
		action="store_true",
		default=False,
		dest="ignore",
		help="ignore cue parsing errors")

	parser.add_option(
		"--dump",
		action="store_true",
		default=False,
		dest="dump",
		help="print the content of cue file")

	parser.add_option(
		"-n", "--dry-run",
		action="store_true",
		default=False,
		dest="dry_run")

	conversion = OptionGroup(parser, "Encoding options")

	conversion.add_option(
		'-d', '--dir',
		action='store',
		type='string',
		dest='dir',
		default=config.DIR,
		help="output directory")

	conversion.add_option(
		"-C", "--compression",
		action="store",
		type="int",
		dest="compression",
		default=config.COMPRESSION,
		help="compression factor for output format")

	parser.add_option_group(conversion)

	format = OptionGroup(parser, "Output Format")

	format.add_option(
		"-r", "--sample-rate",
		action='store',
		type='int',
		dest='sample_rate',
		default=config.SAMPLE_RATE,
		metavar="RATE")

	format.add_option(
		"-c", "--channels",
		action='store',
		type='int',
		default=config.CHANNELS,
		dest='channels')

	format.add_option(
		"-b", "--bits-per-sample",
		action='store',
		type='int',
		dest='bits_per_sample',
		default=config.BITS_PER_SAMPLE,
		metavar="BITS")

	parser.add_option_group(format)

	return parser.parse_args()

def verify_options(opt):
	if opt.compression is not None and opt.compression < 0 or opt.compression > 8:
		printerr("invalid compression value %d, must be in range 0 .. 8", opt.compression)
		sys.exit(1)

	opt.dir = to_unicode(opt.dir)

def cue_open_files(cue):
	lst = []

	for file in cue.files(True):
		if not file.has_audio_tracks():
			debug("skip file %s: no tracks", quote(file.name))
			continue

		name = cue.path + file.name
		try:
			fp = mutagen.File(name)
		except IOError:
			printerr("unable to open file %s", quote(file.name))
			sys.exit(1)
		else:
			if fp is None:
				printerr("%s: unknown type", quote(file.name))
				sys.exit(1)

		lst.append((file, name, fp.info))

	return lst

def build_decode_command(opt, info):
	cmd = "flac sox - "
	if opt.compression is not None:
		cmd += "-C %d " % opt.compression
	if opt.sample_rate and opt.sample_rate != info.sample_rate:
		cmd += "-r %d " % opt.sample_rate
	if opt.bits_per_sample and opt.bits_per_sample != info.bits_per_sample:
		cmd += "-b %d " % opt.bits_per_sample
	if opt.channels and opt.channels != info.channels:
		cmd += "-c %d " % opt.channels
	return cmd + "%f"

def splitted_tracks(dir):
	return sorted([f for f in os.listdir(dir) if f.startswith("split-track")])

def cue_split(cue, opt):
	tracknumber = 0
	for file, name, info in cue_open_files(cue):
		points = list(file.split_points(info))
		if not points:
			debug("skip file %s: single track", quote(file.name))
			continue

		decode = build_decode_command(opt, info)
		args = ["shnsplit", "-w", "-d", opt.dir, "-o", decode, name]
		debug("run %s", " ".join(map(quote, args)))

		if opt.dry_run:
			continue

		proc = Popen(args, stdin = PIPE)
		proc.stdin.write("\n".join(map(str, points)))
		proc.stdin.close()

		ret = proc.wait()
		if ret != 0:
			printerr("shnsplit failed: exit code %d", ret)
			sys.exit(1)

		for track, fname in zip(file.tracks(True), splitted_tracks(opt.dir)):
			tracknumber += 1
			title = track.get("title") or "track"
			newname = "%02d.%s.flac" % (tracknumber, title)

			printf("Rename [%s] --> [%s] : ", fname, newname)
			try:
				os.rename(opt.dir + "/" + fname, opt.dir + "/" + newname)
			except OSError as err:
				printf("FAILED: %s\n", err)
				sys.exit(1)
			else:
				printf("OK\n")

def main():
	options, args = parse_args()
	verify_options(options)

	if len(args) != 1:
		printf("Usage: %s [options] cuefile\n", progname)
		return 1

	def on_error(err):
		printerr("%d: %s\n" % (err.line, err))
		if not options.ignore:
			raise StopIteration

	cuefile = to_unicode(args[0])
	try:
		cue = read_cue(cuefile, on_error=on_error)
	except StopIteration:
		return 1
	except IOError as err:
		printerr("open %s: %s", err.filename, err.strerror)
		return 1
	except Exception as err:
		printerr("read_cue failed: %s: %s\n", err.__class__.__name__, err.filename)
		return 1

	cue.path = dirname(cuefile)
	if cue.path:
		cue.path += "/"

	if options.dump:
		print_cue(cue)
	else:
		cue_split(cue, options)

	return 0

if __name__ == '__main__':
	sys.exit(main())
